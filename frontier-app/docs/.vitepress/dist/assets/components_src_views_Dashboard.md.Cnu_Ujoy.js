import{_ as a,c as o,o as r,ae as t}from"./chunks/framework.Dh1jimFm.js";const p=JSON.parse('{"title":"Dashboard","description":"","frontmatter":{},"headers":[],"relativePath":"components/src/views/Dashboard.md","filePath":"components/src/views/Dashboard.md"}'),d={name:"components/src/views/Dashboard.md"};function c(s,e,l,i,n,b){return r(),o("div",null,e[0]||(e[0]=[t('<h1 id="dashboard" tabindex="-1">Dashboard <a class="header-anchor" href="#dashboard" aria-label="Permalink to &quot;Dashboard&quot;">​</a></h1><h2 id="expose" tabindex="-1">Expose <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;Expose&quot;">​</a></h2><h3 id="records" tabindex="-1">records <a class="header-anchor" href="#records" aria-label="Permalink to &quot;records&quot;">​</a></h3><blockquote><p>原始训练记录数据 <br><code>@member</code> {Array&lt;{date: string, type: string, duration: number, calories: number}&gt;}<br><code>@description</code> 包含所有训练记录的数组，每个记录包含日期、类型、时长和卡路里<br><code>@example</code> // 父组件中获取原始数据<br>const rawData = dashboardRef.value.records;</p></blockquote><h3 id="totalduration" tabindex="-1">totalDuration <a class="header-anchor" href="#totalduration" aria-label="Permalink to &quot;totalDuration&quot;">​</a></h3><blockquote><p>总训练时长（分钟） <br><code>@member</code> {number}<br><code>@description</code> 计算所有训练记录的总时长（单位：分钟）<br><code>@example</code> // 父组件中获取总时长<br>const minutes = dashboardRef.value.totalDuration;</p></blockquote><h3 id="totalcalories" tabindex="-1">totalCalories <a class="header-anchor" href="#totalcalories" aria-label="Permalink to &quot;totalCalories&quot;">​</a></h3><blockquote><p>总消耗卡路里 <br><code>@member</code> {number}<br><code>@description</code> 计算所有训练记录的总卡路里消耗<br><code>@example</code> // 父组件中获取总卡路里<br>const cals = dashboardRef.value.totalCalories;</p></blockquote><h3 id="totalsessions" tabindex="-1">totalSessions <a class="header-anchor" href="#totalsessions" aria-label="Permalink to &quot;totalSessions&quot;">​</a></h3><blockquote><p>总训练次数 <br><code>@member</code> {number}<br><code>@description</code> 训练记录的总数量<br><code>@example</code> // 父组件中获取训练次数<br>const sessions = dashboardRef.value.totalSessions;</p></blockquote><h3 id="goalprogress" tabindex="-1">goalProgress <a class="header-anchor" href="#goalprogress" aria-label="Permalink to &quot;goalProgress&quot;">​</a></h3><blockquote><p>目标进度百分比 <br><code>@member</code> {number}<br><code>@description</code> 当前训练时长与目标时长的百分比（上限 100%）<br><code>@example</code> // 父组件中获取进度<br>const progress = dashboardRef.value.goalProgress;</p></blockquote><h3 id="filteredrecords" tabindex="-1">filteredRecords <a class="header-anchor" href="#filteredrecords" aria-label="Permalink to &quot;filteredRecords&quot;">​</a></h3><blockquote><p>根据日期筛选后的记录 <br><code>@member</code> {Array}<br><code>@description</code> 基于 selectedDate 范围筛选后的训练记录<br><code>@example</code> // 父组件中设置日期范围<br>dashboardRef.value.selectedDate = [new Date(&#39;2023-01-01&#39;), new Date(&#39;2023-12-31&#39;)];<br>// 然后获取筛选结果<br>const filtered = dashboardRef.value.filteredRecords;</p></blockquote><h3 id="chartdata" tabindex="-1">chartData <a class="header-anchor" href="#chartdata" aria-label="Permalink to &quot;chartData&quot;">​</a></h3><blockquote><p>折线图数据 <br><code>@member</code> {Object}<br><code>@property</code> 图表数据集<br><code>@description</code> 用于 LineChart 组件的格式化数据<br><code>@example</code> // 父组件中获取图表数据<br>const lineData = dashboardRef.value.chartData;</p></blockquote><h3 id="piedata" tabindex="-1">pieData <a class="header-anchor" href="#piedata" aria-label="Permalink to &quot;pieData&quot;">​</a></h3><blockquote><p>饼图数据 <br><code>@member</code> {Object}<br><code>@property</code> 图表数据集<br><code>@description</code> 用于 PieChart 组件的格式化数据<br><code>@example</code> // 父组件中获取饼图数据<br>const pieData = dashboardRef.value.pieData;</p></blockquote><h3 id="fetchtrainingdata" tabindex="-1">fetchTrainingData <a class="header-anchor" href="#fetchtrainingdata" aria-label="Permalink to &quot;fetchTrainingData&quot;">​</a></h3><blockquote><p>重新加载训练数据 <br><code>@function</code> true<br><code>@async</code> true<br><code>@description</code> 强制刷新所有统计数据和图表<br><code>@example</code> // 父组件中刷新数据<br>await dashboardRef.value.fetchTrainingData();</p></blockquote><h3 id="selecteddate" tabindex="-1">selectedDate <a class="header-anchor" href="#selecteddate" aria-label="Permalink to &quot;selectedDate&quot;">​</a></h3><blockquote><p>当前选择的日期范围 <br><code>@member</code> {[Date, Date]|null}<br><code>@description</code> 用于筛选的双日期范围（开始日期和结束日期）<br><code>@example</code> // 父组件中设置日期范围<br>dashboardRef.value.selectedDate = [new Date(), new Date()];</p></blockquote><hr><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Dashboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div>',24)]))}const u=a(d,[["render",c]]);export{p as __pageData,u as default};
