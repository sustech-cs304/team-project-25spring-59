import{_ as o,c as a,o as t,ae as i}from"./chunks/framework.Dh1jimFm.js";const b=JSON.parse('{"title":"Carousel","description":"","frontmatter":{},"headers":[],"relativePath":"components/src/views/Carousel.md","filePath":"components/src/views/Carousel.md"}'),r={name:"components/src/views/Carousel.md"};function s(l,e,n,c,d,u){return t(),a("div",null,e[0]||(e[0]=[i('<h1 id="carousel" tabindex="-1">Carousel <a class="header-anchor" href="#carousel" aria-label="Permalink to &quot;Carousel&quot;">​</a></h1><h2 id="expose" tabindex="-1">Expose <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;Expose&quot;">​</a></h2><h3 id="isplaying" tabindex="-1">isPlaying <a class="header-anchor" href="#isplaying" aria-label="Permalink to &quot;isPlaying&quot;">​</a></h3><blockquote><p>当前转场动画播放状态 <br><code>@member</code> {boolean}<br><code>@description</code> 用于指示转场动画是否正在播放中<br><code>@example</code> // 在父组件中监测状态<br>watch(() =&gt; templateRef.value.isPlaying, (val) =&gt; {<br> console.log(&#39;转场状态变化:&#39;, val);<br>});</p></blockquote><h3 id="showabout" tabindex="-1">showAbout <a class="header-anchor" href="#showabout" aria-label="Permalink to &quot;showAbout&quot;">​</a></h3><blockquote><p>关于弹窗的显示控制状态 <br><code>@member</code> {boolean}<br><code>@description</code> 控制&quot;关于我们&quot;弹窗的显示/隐藏状态<br><code>@example</code> // 在父组件中打开弹窗<br>templateRef.value.showAbout = true;</p></blockquote><h3 id="infoitems" tabindex="-1">infoItems <a class="header-anchor" href="#infoitems" aria-label="Permalink to &quot;infoItems&quot;">​</a></h3><blockquote><p>右上角资源信息配置数组 <br><code>@member</code> {Array&lt;{image: string, text: string}&gt;}<br><code>@description</code> 包含 AP 点数、金币、钻石等资源信息的配置数组<br><code>@example</code> // 在父组件中更新数据<br>templateRef.value.infoItems = [<br> { image: &quot;img/ap.png&quot;, text: &quot;300/300&quot; },<br> ...其他数据<br>];</p></blockquote><h3 id="studentl2d" tabindex="-1">studentL2D <a class="header-anchor" href="#studentl2d" aria-label="Permalink to &quot;studentL2D&quot;">​</a></h3><blockquote><p>Spine 动画实例数据引用 <br><code>@member</code> {Object|null}<br><code>@description</code> 包含 Live2D 动画的 Spine 实例数据，可用于高级动画控制<br><code>@example</code> // 在父组件中访问动画数据<br>console.log(&#39;动画数据:&#39;, templateRef.value.studentL2D);</p></blockquote><h3 id="playtransition" tabindex="-1">playTransition <a class="header-anchor" href="#playtransition" aria-label="Permalink to &quot;playTransition&quot;">​</a></h3><blockquote><p>触发页面转场效果的方法 <br><code>@function</code> true<br><code>@description</code> 播放转场动画并在动画结束后自动跳转到仪表盘页面<br><code>@example</code> // 在父组件中触发转场<br>templateRef.value.playTransition();</p></blockquote><h3 id="transitionvideo" tabindex="-1">transitionVideo <a class="header-anchor" href="#transitionvideo" aria-label="Permalink to &quot;transitionVideo&quot;">​</a></h3><blockquote><p>视频元素 DOM 引用 <br><code>@member</code> {HTMLVideoElement|null}<br><code>@description</code> 转场动画视频元素的直接引用，可用于自定义播放控制<br><code>@warning</code> 谨慎操作 DOM 元素<br><code>@example</code> // 在父组件中访问视频元素<br>templateRef.value.transitionVideo?.pause();</p></blockquote><hr><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Carousel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div>',16)]))}const h=o(r,[["render",s]]);export{b as __pageData,h as default};
